from contextlib import suppress

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, MagicData
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, WebAppInfo
from aiogram.utils.markdown import hcode, hbold
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bot.manager import Manager
from app.bot.utils.redis import RedisStorage

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç text
from datetime import datetime  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç datetime

from environs import Env

env = Env()
env.read_env()

DATABASE_URL = f"postgresql+asyncpg://{env.str('DB_USER')}:{env.str('DB_PASSWORD')}@{env.str('PG_HOST')}:{env.str('PG_PORT')}/{env.str('DB_NAME')}"

V2RAYTUN_DEEPLINK = f"{env.str('WEBHOOK_HOST')}/?url=v2raytun://import/"
HAPP_DEEPLINK = f"{env.str('WEBHOOK_HOST')}/?url=happ://add/"

engine = create_async_engine(DATABASE_URL)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ –ë–î
async def get_keys(session: AsyncSession, tg_id: int):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º text –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
    query = text("""
        SELECT * FROM keys WHERE tg_id = :tg_id
    """)
    
    result = await session.execute(query, {"tg_id": tg_id})
    return result.mappings().all()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_keys_info(tg_id: int) -> tuple[str, list]:
    try:
        async with async_session() as session:
            keys = await get_keys(session, tg_id)
            
            if not keys:
                return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", []
            
            result = "üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
            keys_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–∞—Ö –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
            
            for i, key in enumerate(keys, 1):
                expiry_time = key.get('expiry_time', 0)
                expiry_date = datetime.utcfromtimestamp(expiry_time / 1000) if expiry_time else datetime.utcnow()
                current_date = datetime.utcnow()
                time_left = expiry_date - current_date
                
                if time_left.total_seconds() <= 0:
                    status = "‚ùå –∏—Å—Ç–µ–∫"
                else:
                    status = f"‚úÖ –∞–∫—Ç–∏–≤–µ–Ω (–æ—Å—Ç–∞–ª–æ—Å—å {time_left.days} –¥–Ω–µ–π)"
                
                result += (
                    f"<b>–ö–ª—é—á #{i}:</b>\n"
                    f"‚Ä¢ ID: <code>{key.get('client_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
                    f"‚Ä¢ –ö–ª—é—á: <code>{key.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
                    f"‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä: <code>{key.get('server_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
                    f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expiry_date.strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if key.get('tariff_id'):
                    result += f"‚Ä¢ –¢–∞—Ä–∏—Ñ: {key.get('tariff_id')}\n"
                
                result += f"‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω: {'–î–∞' if key.get('is_frozen') else '–ù–µ—Ç'}\n\n"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
                key_data = {
                    'id': i,
                    'name': f"–ö–ª—é—á #{i} - {key.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
                    'key': key.get('key', ''),
                    'remnawave_link': key.get('remnawave_link', '')
                }
                keys_data.append(key_data)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ
                if key.get('key'):
                    result += (
                        f"‚Ä¢ –î–∏–ø–ª–∏–Ω–∫ Happ: <code>{HAPP_DEEPLINK}{key.get('key')}</code>\n"
                        f"‚Ä¢ –î–∏–ø–ª–∏–Ω–∫ V2RayTun: <code>{V2RAYTUN_DEEPLINK}{key.get('key')}</code>\n\n\n"
                    )

                if key.get('remnawave_link'):
                    result += f"‚Ä¢ Remnawave: <code>{key.get('remnawave_link')}</code>\n\n\n"
            
            result += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–ª—é—á–æ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–ø–ª–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            return result, keys_data
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö: {e}\n{error_details}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", []

router_id = Router()
router_id.message.filter(
    F.chat.type.in_(["group", "supergroup"]),
)


@router_id.message(Command("id"))
async def handler(message: Message) -> None:
    """
    Sends chat ID in response to the /id command.

    :param message: Message object.
    :return: None
    """
    await message.reply(hcode(message.chat.id))


router = Router()
router.message.filter(
    F.message_thread_id.is_not(None),
    F.chat.type.in_(["group", "supergroup"]),
    MagicData(F.event_chat.id == F.config.bot.GROUP_ID),  # type: ignore
)


@router.message(Command("silent"))
async def handler(message: Message, manager: Manager, redis: RedisStorage) -> None:
    """
    Toggles silent mode for a user in the group.
    If silent mode is disabled, it will be enabled, and vice versa.

    :param message: Message object.
    :param manager: Manager object.
    :param redis: RedisStorage object.
    :return: None
    """
    user_data = await redis.get_by_message_thread_id(message.message_thread_id)
    if not user_data: return None  # noqa

    if user_data.message_silent_mode:
        text = manager.text_message.get("silent_mode_disabled")
        with suppress(TelegramBadRequest):
            # Reply with the specified text
            await message.reply(text)

            # Unpin the chat message with the silent mode status
            await message.bot.unpin_chat_message(
                chat_id=message.chat.id,
                message_id=user_data.message_silent_id,
            )

        user_data.message_silent_mode = False
        user_data.message_silent_id = None
    else:
        text = manager.text_message.get("silent_mode_enabled")
        with suppress(TelegramBadRequest):
            # Reply with the specified text
            msg = await message.reply(text)

            # Pin the chat message with the silent mode status
            await msg.pin(disable_notification=True)

        user_data.message_silent_mode = True
        user_data.message_silent_id = msg.message_id

    await redis.update_user(user_data.id, user_data)


@router.message(Command("information"))
async def handler(message: Message, manager: Manager, redis: RedisStorage) -> None:
    """
    Sends user information in response to the /information command.

    :param message: Message object.
    :param manager: Manager object.
    :param redis: RedisStorage object.
    :return: None
    """
    user_data = await redis.get_by_message_thread_id(message.message_thread_id)
    if not user_data: return None  # noqa

    format_data = user_data.to_dict()
    format_data["full_name"] = hbold(format_data["full_name"])
    text = manager.text_message.get("user_information")
    # Reply with formatted user information
    await message.reply(text.format_map(format_data))


@router.message(Command("keys"))
async def handler(message: Message, manager: Manager, redis: RedisStorage) -> None:
    user_data = await redis.get_by_message_thread_id(message.message_thread_id)
    if not user_data: return None  # noqa

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö
        keys_info, keys_data = await get_user_keys_info(user_data.id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        builder = InlineKeyboardBuilder()

        for key_data in keys_data:
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è BUTTON_DATA_INVALID
            callback_data = f"key_{user_data.id}_{key_data['id']}"
            builder.add(InlineKeyboardButton(
                text=key_data['name'][:35],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                callback_data=callback_data
            ))
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É
        builder.adjust(1)
        
        await message.reply(
            text=keys_info,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏: {e}\n{error_details}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
        await message.reply(
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É —Å –∫–ª—é—á–æ–º
@router.callback_query(F.data.startswith("key_"))
async def handle_key_selection(callback_query: CallbackQuery, manager: Manager, redis: RedisStorage):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data_parts = callback_query.data.split("_")
    if len(data_parts) < 3:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    _, user_id, key_id = data_parts[0], data_parts[1], data_parts[2]

    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await redis.get_user(int(user_id))
    if not user_data:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        async with async_session() as session:
            keys = await get_keys(session, int(user_id))
            
            if not keys or len(keys) < int(key_id):
                await callback_query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–æ –∏–Ω–¥–µ–∫—Å—É (key_id - 1, —Ç–∞–∫ –∫–∞–∫ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1)
            selected_key = keys[int(key_id) - 1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (key –∏–ª–∏ remnawave_link)
            key_value = selected_key.get('key') or selected_key.get('remnawave_link')
            remnawave_link = selected_key.get('remnawave_link')
            
            if not key_value:
                await callback_query.answer("–ö–ª—é—á –ø—É—Å—Ç")
                return
            
            print(f"key_value: {key_value}")
            print(f"remnawave_link: {remnawave_link}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –¥–∏–ø–ª–∏–Ω–∫–∞–º–∏
            if selected_key.get('key'):  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–π –∫–ª—é—á
                builder.add(InlineKeyboardButton(
                    text="V2RayTun",
                    url=f"{V2RAYTUN_DEEPLINK}{selected_key.get('key')}"
                ))
                
                builder.add(InlineKeyboardButton(
                    text="Happ",
                    url=f"{HAPP_DEEPLINK}{selected_key.get('key')}"
                ))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å remnawave_link, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ–≥–æ –∫–∞–∫ WebApp
            if remnawave_link:
                builder.add(InlineKeyboardButton(
                    text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å",
                    web_app=WebAppInfo(url=remnawave_link)
                ))
            
            # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
            builder.adjust(2)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª—é—á–∞
            if remnawave_link and not selected_key.get('key'):
                # –¢–æ–ª—å–∫–æ remnawave —Å—Å—ã–ª–∫–∞
                message_text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:"
            else:
                # –û–±—ã—á–Ω—ã–µ –∫–ª—é—á–∏ –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–π —Ç–∏–ø
                message_text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏ –∫–ª—é—á –≤—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await callback_query.bot.send_message(
                chat_id=user_data.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                text=message_text,
                reply_markup=builder.as_markup()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ì–†–£–ü–ü–£ –æ —Ç–æ–º, —á—Ç–æ –¥–∏–ø–ª–∏–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            await callback_query.message.reply(
                text=f"–î–∏–ø–ª–∏–Ω–∫–∏ –¥–ª—è –∫–ª—é—á–∞ #{key_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
            await callback_query.answer("–î–∏–ø–ª–∏–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–ø–ª–∏–Ω–∫–æ–≤: {e}")
        import traceback
        error_details = traceback.format_exc()
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–ø–ª–∏–Ω–∫–æ–≤")
        await callback_query.message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∏–ø–ª–∏–Ω–∫–æ–≤: {e}")


@router.message(Command(commands=["ban"]))
async def handler(message: Message, manager: Manager, redis: RedisStorage) -> None:
    """
    Toggles the ban status for a user in the group.
    If the user is banned, they will be unbanned, and vice versa.

    :param message: Message object.
    :param manager: Manager object.
    :param redis: RedisStorage object.
    :return: None
    """
    user_data = await redis.get_by_message_thread_id(message.message_thread_id)
    if not user_data: return None  # noqa

    if user_data.is_banned:
        user_data.is_banned = False
        text = manager.text_message.get("user_unblocked")
    else:
        user_data.is_banned = True
        text = manager.text_message.get("user_blocked")

    # Reply with the specified text
    await message.reply(text)
    await redis.update_user(user_data.id, user_data)
